package com.example;

import org.json.JSONArray;
import org.json.JSONObject;
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

import java.io.*;
import java.nio.charset.StandardCharsets;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.*;
import java.util.zip.ZipEntry;
import java.util.zip.ZipInputStream;

public class XMindFlowExcelExtractorVT {

    private static final String XMIND_FILE_PATH = "C:\\Users\\home\\Documents\\xmind\\test.xmind";
    private static final String OUTPUT_DIRECTORY = "C:\\Users\\home\\Documents\\xmind\\";

    public static void main(String[] args) {
        try {
            XMindFlowExcelExtractorVT extractor = new XMindFlowExcelExtractorVT();
            System.out.println("Processing XMind file: " + XMIND_FILE_PATH);
            List<FlowPath> paths = extractor.extractFlowPaths(XMIND_FILE_PATH);

            String outputFile = extractor.generateOutputFilename();
            new File(OUTPUT_DIRECTORY).mkdirs();

            extractor.writeToExcel(paths, outputFile);

            System.out.println("\n‚úÖ Extracted " + paths.size() + " flow paths");
            System.out.println("üìÑ Output file: " + outputFile);

        } catch (Exception e) {
            System.err.println("‚ùå Error: " + e.getMessage());
            e.printStackTrace();
        }
    }

    private String generateOutputFilename() {
        String timestamp = LocalDateTime.now().format(DateTimeFormatter.ofPattern("yyyyMMdd_HHmmss"));
        String baseName = new File(XMIND_FILE_PATH).getName().replace(".xmind", "");
        return OUTPUT_DIRECTORY + baseName + "_flows_" + timestamp + ".xlsx";
    }

    public static class FlowPath {
        private final List<String> steps;
        private final boolean isPositive;
        private final int negatedIdx; // -1 if not negative/negatified (positive)
        private final List<Character> pathChoices;

        public FlowPath(List<String> steps, boolean isPositive, int negatedIdx, List<Character> pathChoices) {
            this.steps = new ArrayList<>(steps);
            this.isPositive = isPositive;
            this.negatedIdx = negatedIdx;
            this.pathChoices = new ArrayList<>(pathChoices);
        }

        public List<String> getSteps() { return steps; }
        public boolean isPositive() { return isPositive; }
        public String getOutcome() { return isPositive ? "Positive" : "Negative"; }
        public String generatePathString() {
            StringBuilder sb = new StringBuilder();
            for (char c : pathChoices) sb.append(c);
            return sb.toString();
        }
        public int getNegatedIdx() { return negatedIdx; }
    }

    public List<FlowPath> extractFlowPaths(String xmindFilePath) throws IOException {
        String contentJson = extractContentJson(xmindFilePath);
        return parseFlowPaths(contentJson);
    }

    private String extractContentJson(String xmindFilePath) throws IOException {
        try (ZipInputStream zis = new ZipInputStream(new FileInputStream(xmindFilePath))) {
            ZipEntry entry;
            while ((entry = zis.getNextEntry()) != null) {
                if ("content.json".equals(entry.getName())) {
                    ByteArrayOutputStream baos = new ByteArrayOutputStream();
                    byte[] buffer = new byte[1024];
                    int len;
                    while ((len = zis.read(buffer)) > 0) baos.write(buffer, 0, len);
                    return baos.toString(StandardCharsets.UTF_8);
                }
            }
        }
        throw new IOException("content.json not found in XMind file");
    }

    // Main change: when creating a negative scenario, track the index of the cell you negate, so that you can color it.
    private List<FlowPath> parseFlowPaths(String contentJson) {
        List<FlowPath> allPaths = new ArrayList<>();
        JSONArray rootArray = new JSONArray(contentJson);
        for (int i = 0; i < rootArray.length(); i++) {
            JSONObject sheet = rootArray.getJSONObject(i);
            if (sheet.has("rootTopic")) {
                traverseAndExtractPaths(sheet.getJSONObject("rootTopic"),
                        new ArrayList<>(), new ArrayList<>(), allPaths, null, -1, -1);
            }
        }
        return allPaths;
    }

    private void traverseAndExtractPaths(JSONObject node,
                                         List<String> currentPath,
                                         List<Character> pathChoices,
                                         List<FlowPath> allPaths,
                                         String parentDecision,
                                         int childIdx,
                                         int negatedIdx // if negative, which cell to color
                                         ) {
        String title = node.optString("title", "");

        JSONArray attached = null;
        if (node.has("children")) {
            JSONObject children = node.getJSONObject("children");
            if (children.has("attached")) {
                attached = children.getJSONArray("attached");
            }
        }
        boolean isLeaf = (attached == null || attached.length() == 0);

        List<String> newPath = new ArrayList<>(currentPath);
        int newNegatedIdx = negatedIdx;

        if (currentPath.isEmpty() && !title.isEmpty()) newPath.add(title);
        else if (childIdx == 0 && !isAltOutcomeNode(title)) {
            // Positive/first branch: add node label as step
            newPath.add(title);
        } else if (isAltOutcomeNode(title)) {
            // Negative outcome: replace previous step with negated version
            if (!newPath.isEmpty() && parentDecision != null) {
                newPath.set(newPath.size() - 1, negateDecision(parentDecision));
                newNegatedIdx = newPath.size() - 1; // index to color
            }
            newPath.add(title);
        } else if (!title.isEmpty()) {
            // Other branches (unusual)
            newPath.add(title);
        }

        if (isLeaf) {
            boolean isPositive = isPositiveOutcome(title);
            allPaths.add(new FlowPath(newPath, isPositive, newNegatedIdx, pathChoices));
            return;
        }

        // Traverse children
        for (int i = 0; i < attached.length(); i++) {
            JSONObject child = attached.getJSONObject(i);
            List<Character> newChoices = new ArrayList<>(pathChoices);
            newChoices.add(i == 0 ? 'T' : 'F');
            traverseAndExtractPaths(child, newPath, newChoices, allPaths, title, i, newNegatedIdx);
        }
    }

    private boolean isAltOutcomeNode(String title) {
        String lower = title.toLowerCase();
        return lower.contains("alt outcome") ||
                lower.contains("alternateoutcome") ||
                lower.contains("does not apply") ||
                lower.contains("rule does not apply") ||
                lower.contains("otherwise");
    }

    private String negateDecision(String s) {
        String lower = s.toLowerCase().trim();
        if (s.contains("==")) return s.replace("==", "!=");
        if (s.contains("!=")) return s.replace("!=", "==");
        if (lower.contains(" is ") && !lower.contains("not ")) return s.replaceFirst(" is ", " is not ");
        if (lower.contains(" has ") && !lower.contains("no ")) return s.replaceFirst(" has ", " has no ");
        if (lower.contains(" contains ") && !lower.contains("does not contain")) return s.replaceFirst(" contains ", " does not contain ");
        if (lower.contains(" starts with ") && !lower.contains("does not start with")) return s.replaceFirst(" starts with ", " does not start with ");
        if (lower.contains(" present")) return s.replaceFirst(" present", " not present");
        if (lower.contains(" enabled")) return s.replaceFirst(" enabled", " not enabled");
        if (lower.contains(" includes ") && !lower.contains("does not include")) return s.replaceFirst(" includes ", " does not include ");
        if (lower.matches(".*\\s(is|has)$")) return s + " not"; // e.g., "A is" ‚Üí "A is not"
        return "NOT(" + s + ")";
    }

    private boolean isPositiveOutcome(String nodeTitle) {
        String lower = nodeTitle.toLowerCase();
        if (lower.contains("fire bundle") || lower.contains("message_"))
            return true;
        if (lower.contains("alt outcome") || lower.contains("alternateoutcome")
                || lower.contains("rule does not apply") || lower.contains("does not apply"))
            return false;
        return true;
    }

    // üí° Main Excel output logic with formatting!
    public void writeToExcel(List<FlowPath> paths, String outputFile) throws IOException {
        Workbook wb = new XSSFWorkbook();
        Sheet sheet = wb.createSheet("FlowPaths");

        // STYLES
        CellStyle borderStyle = wb.createCellStyle();
        borderStyle.setBorderTop(BorderStyle.THIN);
        borderStyle.setBorderBottom(BorderStyle.THIN);
        borderStyle.setBorderLeft(BorderStyle.THIN);
        borderStyle.setBorderRight(BorderStyle.THIN);

        // Header: bold + blue background
        CellStyle headerStyle = wb.createCellStyle();
        Font headerFont = wb.createFont();
        headerFont.setBold(true); headerStyle.setFont(headerFont);
        headerStyle.cloneStyleFrom(borderStyle);
        headerStyle.setFillForegroundColor(IndexedColors.LIGHT_CORNFLOWER_BLUE.getIndex());
        headerStyle.setFillPattern(FillPatternType.SOLID_FOREGROUND);

        // Light green background for positive
        CellStyle positiveStyle = wb.createCellStyle();
        positiveStyle.cloneStyleFrom(borderStyle);
        positiveStyle.setFillForegroundColor(IndexedColors.LIGHT_GREEN.getIndex());
        positiveStyle.setFillPattern(FillPatternType.SOLID_FOREGROUND);

        // Light red for negated (negative) cells
        CellStyle negatifiedStyle = wb.createCellStyle();
        negatifiedStyle.cloneStyleFrom(borderStyle);
        negatifiedStyle.setFillForegroundColor(IndexedColors.ROSE.getIndex());
        negatifiedStyle.setFillPattern(FillPatternType.SOLID_FOREGROUND);

        // Normal bordered style (plain cell)
        // Use borderStyle directly

        int maxSteps = paths.stream().mapToInt(p -> p.getSteps().size()).max().orElse(0);

        // Header row
        Row headerRow = sheet.createRow(0);
        int col = 0;
        for (int i = 1; i <= maxSteps; i++) {
            Cell cell = headerRow.createCell(col++);
            cell.setCellValue("Step_" + i);
            cell.setCellStyle(headerStyle);
        }
        Cell outcomeCell = headerRow.createCell(col++);
        outcomeCell.setCellValue("Outcome");
        outcomeCell.setCellStyle(headerStyle);

        Cell pathStrCell = headerRow.createCell(col++);
        pathStrCell.setCellValue("Path_String");
        pathStrCell.setCellStyle(headerStyle);

        Cell genAtCell = headerRow.createCell(col++);
        genAtCell.setCellValue("Generated_At");
        genAtCell.setCellStyle(headerStyle);

        // Data rows
        String timestamp = LocalDateTime.now().format(DateTimeFormatter.ofPattern("dd-MM-yyyy HH:mm"));
        int rowNum = 1;
        for (FlowPath path : paths) {
            Row row = sheet.createRow(rowNum++);
            col = 0;
            CellStyle rowStyle = path.isPositive() ? positiveStyle : borderStyle;
            int negatedIdx = path.getNegatedIdx();

            // Steps
            for (int i = 0; i < maxSteps; i++) {
                Cell cell = row.createCell(col++);
                String value = i < path.getSteps().size() ? path.getSteps().get(i) : "";
                cell.setCellValue(value);
                // Color only this cell for negative, if needed
                if (!path.isPositive() && negatedIdx == i)
                    cell.setCellStyle(negatifiedStyle);
                else
                    cell.setCellStyle(rowStyle);
            }
            // Outcome
            Cell oc = row.createCell(col++);
            oc.setCellValue(path.getOutcome());
            oc.setCellStyle(rowStyle);
            // Path string
            Cell pc = row.createCell(col++);
            pc.setCellValue(path.generatePathString());
            pc.setCellStyle(rowStyle);
            // Generated at
            Cell gc = row.createCell(col++);
            gc.setCellValue(timestamp);
            gc.setCellStyle(rowStyle);
        }
        // Final touches: autosize columns
        for (col = 0; col < maxSteps + 3; col++) {
            sheet.autoSizeColumn(col);
        }
        try (FileOutputStream fos = new FileOutputStream(outputFile)) {
            wb.write(fos);
        }
        wb.close();
    }
}

