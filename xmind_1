// Generic CSV 
package com.example;

import org.json.JSONArray;
import org.json.JSONObject;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVPrinter;

import java.io.*;
import java.nio.charset.StandardCharsets;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.*;
import java.util.zip.ZipEntry;
import java.util.zip.ZipInputStream;

public class XMindFlowExtractor {

    // CHANGE THESE TO YOUR ENVIRONMENT:
    private static final String XMIND_FILE_PATH = "C:\\Users\\home\\Documents\\xmind\\test.xmind";
    private static final String OUTPUT_DIRECTORY = "C:\\Users\\home\\Documents\\xmind\\";

    public static void main(String[] args) {
        try {
            XMindFlowExtractor extractor = new XMindFlowExtractor();
            System.out.println("Processing XMind file: " + XMIND_FILE_PATH);
            List<FlowPath> paths = extractor.extractFlowPaths(XMIND_FILE_PATH);

            String outputFile = extractor.generateOutputFilename();
            new File(OUTPUT_DIRECTORY).mkdirs();

            extractor.writeToCSV(paths, outputFile);

            System.out.println("\n‚úÖ Extracted " + paths.size() + " flow paths");
            System.out.println("üìÑ Output file: " + outputFile);
            extractor.printSummary(paths);

        } catch (Exception e) {
            System.err.println("‚ùå Error: " + e.getMessage());
            e.printStackTrace();
        }
    }

    private String generateOutputFilename() {
        String timestamp = LocalDateTime.now().format(DateTimeFormatter.ofPattern("yyyyMMdd_HHmmss"));
        String baseName = new File(XMIND_FILE_PATH).getName().replace(".xmind", "");
        return OUTPUT_DIRECTORY + baseName + "_flows_" + timestamp + ".csv";
    }

    public static class FlowPath {
        private final List<String> steps;
        private final boolean isPositive;
        private final List<Character> pathChoices;

        public FlowPath(List<String> steps, boolean isPositive, List<Character> pathChoices) {
            this.steps = new ArrayList<>(steps);
            this.isPositive = isPositive;
            this.pathChoices = new ArrayList<>(pathChoices);
        }

        public List<String> getSteps() { return steps; }
        public boolean isPositive()    { return isPositive; }
        public String getOutcome()     { return isPositive ? "Positive" : "Negative"; }

        public String generatePathString() {
            StringBuilder sb = new StringBuilder();
            for (char c : pathChoices) sb.append(c);
            return sb.toString();
        }
    }

    public List<FlowPath> extractFlowPaths(String xmindFilePath) throws IOException {
        String contentJson = extractContentJson(xmindFilePath);
        return parseFlowPaths(contentJson);
    }

    private String extractContentJson(String xmindFilePath) throws IOException {
        try (ZipInputStream zis = new ZipInputStream(new FileInputStream(xmindFilePath))) {
            ZipEntry entry;
            while ((entry = zis.getNextEntry()) != null) {
                if ("content.json".equals(entry.getName())) {
                    ByteArrayOutputStream baos = new ByteArrayOutputStream();
                    byte[] buffer = new byte[1024];
                    int len;
                    while ((len = zis.read(buffer)) > 0) baos.write(buffer, 0, len);
                    return baos.toString(StandardCharsets.UTF_8);
                }
            }
        }
        throw new IOException("content.json not found in XMind file");
    }

    private List<FlowPath> parseFlowPaths(String contentJson) {
        List<FlowPath> allPaths = new ArrayList<>();
        JSONArray rootArray = new JSONArray(contentJson);
        for (int i = 0; i < rootArray.length(); i++) {
            JSONObject sheet = rootArray.getJSONObject(i);
            if (sheet.has("rootTopic")) {
                traverseAndExtractPaths(sheet.getJSONObject("rootTopic"),
                        new ArrayList<>(), new ArrayList<>(), allPaths, null, -1);
            }
        }
        return allPaths;
    }

    /**
     * Enhanced: now supports testable scenario logic.
     * For a negative (alternate/else) branch, add "not"/"!="/etc to the *parent* node's condition
     * as the value for this step in the path.
     */
    private void traverseAndExtractPaths(JSONObject node,
                                     List<String> currentPath,
                                     List<Character> pathChoices,
                                     List<FlowPath> allPaths,
                                     String parentDecision,
                                     int childIdx) {
    String title = node.optString("title", "");

    JSONArray attached = null;
    if (node.has("children")) {
        JSONObject children = node.getJSONObject("children");
        if (children.has("attached")) {
            attached = children.getJSONArray("attached");
        }
    }
    boolean isLeaf = (attached == null || attached.length() == 0);

    List<String> newPath = new ArrayList<>(currentPath);

    // Root node: just add
    if (currentPath.isEmpty() && !title.isEmpty()) newPath.add(title);
    // For all other nodes:
    else if (childIdx == 0 && !isAltOutcomeNode(title)) {
        // Positive/first branch: add node label as step
        newPath.add(title);
    } else if (isAltOutcomeNode(title)) {
        // When hitting an alt/negative outcome:
        // 1. Negate the last (parent) step in the path for this branch
        if (!newPath.isEmpty() && parentDecision != null) {
            newPath.set(newPath.size() - 1, negateDecision(parentDecision));
        }
        // 2. Add the alt outcome text as the final step
        newPath.add(title);
    } else if (!title.isEmpty()) {
        // For additional branches, add as is (rare cases)
        newPath.add(title);
    }

    if (isLeaf) {
        boolean isPositive = isPositiveOutcome(title);
        allPaths.add(new FlowPath(newPath, isPositive, pathChoices));
        return;
    }

    // Traverse children, assign T/F based on index.
    for (int i = 0; i < attached.length(); i++) {
        JSONObject child = attached.getJSONObject(i);
        List<Character> newChoices = new ArrayList<>(pathChoices);
        newChoices.add(i == 0 ? 'T' : 'F');
        traverseAndExtractPaths(child, newPath, newChoices, allPaths, title, i);
    }
}


    // Heuristic for "is this node an alt/negative (alternate outcome) node"
    private boolean isAltOutcomeNode(String title) {
        String lower = title.toLowerCase();
        return lower.contains("alt outcome") ||
                lower.contains("alternateoutcome") ||
                lower.contains("does not apply") ||
                lower.contains("rule does not apply") ||
                lower.contains("otherwise");
    }

    // Negates a parent decision for scenario column (e.g., "A is B" ‚Üí "A is not B", "X == Y" ‚Üí "X != Y")
    private String negateDecision(String s) {
        if (s.contains("==")) return s.replace("==", "!=");
        if (s.contains("!=")) return s.replace("!=", "==");
        if (s.toLowerCase().contains(" is ") && !s.toLowerCase().contains("not ")) return s.replaceFirst(" is ", " is not ");
        if (s.toLowerCase().contains(" not ")) return s.replace(" not ", " ");
        if (s.contains("equals")) return s.replace("equals", "does not equal");
        return "NOT(" + s + ")";
    }

    private boolean isPositiveOutcome(String nodeTitle) {
        String lower = nodeTitle.toLowerCase();
        if (lower.contains("fire bundle") || lower.contains("message_"))
            return true;
        if (lower.contains("alt outcome") || lower.contains("alternateoutcome")
                || lower.contains("rule does not apply") || lower.contains("does not apply"))
            return false;
        // Default: treat as positive
        return true;
    }

    public void writeToCSV(List<FlowPath> paths, String outputFile) throws IOException {
        try (FileWriter writer = new FileWriter(outputFile);
             CSVPrinter csvPrinter = new CSVPrinter(writer, CSVFormat.DEFAULT)) {
            int maxSteps = paths.stream().mapToInt(p -> p.getSteps().size()).max().orElse(0);
            // CSV header
            List<String> headers = new ArrayList<>();
            for (int i = 1; i <= maxSteps; i++) headers.add("Step_" + i);
            headers.add("Outcome");
            headers.add("Path_String");
            headers.add("Generated_At");
            csvPrinter.printRecord(headers);
            String timestamp = LocalDateTime.now().format(DateTimeFormatter.ofPattern("dd-MM-yyyy HH:mm"));
            for (FlowPath path : paths) {
                List<String> row = new ArrayList<>();
                for (int i = 0; i < maxSteps; i++)
                    row.add(i < path.getSteps().size() ? escapeCommas(path.getSteps().get(i)) : "");
                row.add(path.getOutcome());
                row.add(path.generatePathString());
                row.add(timestamp);
                csvPrinter.printRecord(row);
            }
        }
    }

    private String escapeCommas(String text) {
        if (text.contains(",")) return "\"" + text.replace("\"", "\"\"") + "\"";
        return text;
    }

    // Preview to console
    public void printSummary(List<FlowPath> paths) {
        long positive = paths.stream().filter(FlowPath::isPositive).count();
        long negative = paths.size() - positive;
        System.out.println("\nüìä Extract Summary:");
        System.out.println("Total Paths: " + paths.size());
        System.out.println("Positive: " + positive + ", Negative: " + negative);
        System.out.println("Sample Paths:");
        paths.stream().limit(5).forEach(path -> {
            String preview = String.join(" ‚Üí ", path.getSteps().subList(0, Math.min(3, path.getSteps().size())));
            if (path.getSteps().size() > 3) preview += " ‚Üí ...";
            System.out.println("  " + preview + " [Outcome: " + path.getOutcome() + ", Path: " + path.generatePathString() + "]");
        });
    }
}
