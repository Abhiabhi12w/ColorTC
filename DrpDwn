async function exportAllLicenseSpecialtiesToCSV() {
    const sleep = ms => new Promise(res => setTimeout(res, ms));

    // Selector helpers
    const firstInput = document.querySelector('input.rcbInput[id*="radLicType"]');
    const secondInput = document.querySelector('input.rcbInput[id*="radSpecialty"]');
    if (!firstInput || !secondInput) {
        console.error('Could not find required dropdowns!');
        return;
    }

    // Helper: get dropdown UL from input
    function getDropdownUl(input) {
        const dropId = input.id.replace('_Input', '_DropDown');
        const dd = document.getElementById(dropId);
        return dd ? dd.querySelector('ul.rcbList') : null;
    }

    // Helper: opens dropdown and returns all options as array of strings
    async function openAndReadDropdown(input, delay = 700) {
        const dropId = input.id.replace('_Input', '_DropDown');
        let dd = document.getElementById(dropId);
        if (!dd) return [];
        const container = input.closest('.RadComboBox');
        const arrow = container?.querySelector('.rcbArrowCell, .rcbArrow');
        if (arrow) arrow.click();
        await sleep(delay);
        dd = document.getElementById(dropId);
        const ul = dd ? dd.querySelector('ul.rcbList') : null;
        if (!ul) return [];
        return Array.from(ul.querySelectorAll('li')).map(li => li.textContent.trim());
    }

    // Download CSV utility
    function downloadCSVFromArray(rows, filename = 'dropdown_data.csv') {
        const csvContent = rows.map(row => row.map(v=>`"${(v||"").replace(/"/g,'""')}"`).join(',')).join('\r\n');
        const blob = new Blob([csvContent], { type: 'text/csv' });
        const url = URL.createObjectURL(blob);
        const a = document.createElement("a");
        a.href = url;
        a.download = filename;
        document.body.appendChild(a);
        a.click();
        setTimeout(() => {
            document.body.removeChild(a);
            URL.revokeObjectURL(url);
        }, 200);
    }

    // Extraction
    await sleep(500);
    const allOptions = await openAndReadDropdown(firstInput, 1000);
    const validOptions = allOptions.slice(1); // skip 1st blank

    let outputLines = [];
    outputLines.push(["License Type", "Specialty 1", "Specialty 2", "Specialty 3", "Specialty 4", "Specialty 5", "..."]);
    console.log(`Processing ${validOptions.length} license types...\n`);

    for (let i = 0; i < validOptions.length; ++i) {
        const idx = i + 1;
        let success = false;
        // Robust selection attempt
        for (let retry = 0; retry < 3; ++retry) {
            await openAndReadDropdown(firstInput, 700);
            const ul = getDropdownUl(firstInput);
            if (ul) {
                const opts = ul.querySelectorAll('li');
                if (opts[idx]) {
                    opts[idx].scrollIntoView({ block: "center" });
                    opts[idx].click();
                    await sleep(1000);
                    if (firstInput.value.trim() === validOptions[i]) {
                        success = true;
                        break;
                    }
                }
            }
        }
        if (!success) {
            console.warn(`❌ Could not select: ${validOptions[i]} (skipping)`);
            continue;
        }
        await sleep(500);
        const specOptions = await openAndReadDropdown(secondInput, 1000);
        const cleanSpecOptions = specOptions.filter(Boolean);

        // Live summary
        console.log(
            `[${i + 1}/${validOptions.length}] ${validOptions[i]} ` +
            `→ ${cleanSpecOptions.length ? cleanSpecOptions.join(', ') : '(no specialties)'}`
        );

        // Output row for CSV/table
        outputLines.push([validOptions[i], ...cleanSpecOptions]);
    }

    // Download as CSV
    downloadCSVFromArray(outputLines);

    console.log('✅ All data processed and download triggered.');
}

exportAllLicenseSpecialtiesToCSV();
