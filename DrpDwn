async function extractDropdownMatrix() {
    const sleep = ms => new Promise(res => setTimeout(res, ms));

    // Helper: Get all options from a dropdown list (ul.rcbList)
    function getOptions(dropdownIndex = 0) {
        const uls = document.querySelectorAll('ul.rcbList');
        if (!uls[dropdownIndex]) return [];
        return Array.from(uls[dropdownIndex].querySelectorAll('li.rcbItem, li.rcbHovered'))
            .map(li => li.textContent.trim())
            .filter(text => text.length > 0);
    }

    // Helper: Click on a specific option in a dropdown
    function selectOption(dropdownIndex, optionIndex) {
        const uls = document.querySelectorAll('ul.rcbList');
        if (!uls[dropdownIndex]) return null;
        const options = uls[dropdownIndex].querySelectorAll('li.rcbItem, li.rcbHovered');
        if (!options[optionIndex]) return null;
        
        const optionText = options[optionIndex].textContent.trim();
        options[optionIndex].click();
        return optionText;
    }

    // Helper: Open a dropdown by clicking its arrow
    function openDropdown(inputElement) {
        if (!inputElement) return;
        const container = inputElement.closest('.RadComboBox');
        if (!container) return;
        const arrow = container.querySelector('.rcbArrowCell, .rcbArrow');
        if (arrow) arrow.click();
    }

    // Main extraction logic
    let results = [];
    results.push(['First Dropdown', 'Second Dropdown Options', 'Third Dropdown Options']);

    // Find your three dropdown inputs (update these selectors as needed)
    const firstInput = document.querySelector('input[id*="radlicType"]'); // First dropdown input
    const secondInput = document.querySelector('input[id*="radSpecialty"]'); // Second dropdown input  
    const thirdInput = document.querySelector('input[id*="third"]'); // Third dropdown input (update this!)

    if (!firstInput) {
        alert('Could not find first dropdown input. Please check the selector.');
        return;
    }

    // Step 1: Open first dropdown to get all its options
    openDropdown(firstInput);
    await sleep(500);
    
    const firstDropdownOptions = getOptions(0); // First ul.rcbList
    
    // Step 2: Loop through each option in the first dropdown
    for (let i = 0; i < firstDropdownOptions.length; i++) {
        // Select option i in first dropdown
        openDropdown(firstInput);
        await sleep(300);
        const selectedFirst = selectOption(0, i);
        await sleep(1000); // Wait for other dropdowns to update
        
        // Get all options from second dropdown
        let secondOptions = [];
        if (secondInput) {
            openDropdown(secondInput);
            await sleep(300);
            secondOptions = getOptions(1); // Second ul.rcbList
        }
        
        // Get all options from third dropdown
        let thirdOptions = [];
        if (thirdInput) {
            openDropdown(thirdInput);
            await sleep(300);
            thirdOptions = getOptions(2); // Third ul.rcbList
        }
        
        // Store the combination
        results.push([
            selectedFirst,
            secondOptions.join(' | '),
            thirdOptions.join(' | ')
        ]);
        
        console.log(`Processed: ${selectedFirst}`);
    }

    // Output results as tab-separated values for Excel
    console.log('\n=== COPY THE FOLLOWING TO EXCEL ===');
    results.forEach(row => {
        console.log(row.join('\t'));
    });
    console.log('=== END OF DATA ===');
}

// Run the extraction
extractDropdownMatrix();
