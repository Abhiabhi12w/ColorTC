
' This macro reads IDs from Column A, makes HTTP requests,
' and searches for a specific string within the response,
' extracting the found string and its surrounding lines.
' This assumes the raw API response actually contains line breaks (CRLF or LF)
' to define these "lines." No external files or libraries required.

Option Explicit

' --- Configuration ---
' IMPORTANT: Update these constants with your actual values
Private Const AUTH_TOKEN As String = "kymtelmerwe......" ' Your Bearer token (if required)
Private Const BASE_URL As String = "https://jsonplaceholder.typicode.com/todos/{id}" ' Base URL with {id} placeholder
Private Const SEARCH_TEXT As String = "title" ' The specific text you are looking for (e.g., "title", "comment")
Private Const LINES_BEFORE As Long = 2 ' Number of lines to include BEFORE the line with SEARCH_TEXT
Private Const LINES_AFTER As Long = 1  ' Number of lines to include AFTER the line with SEARCH_TEXT

' --- Main Macro Subroutine ---
Public Sub ProcessIDsAndSearchTextResponse()

    Dim ws As Worksheet
    Dim lastRow As Long
    Dim i As Long
    Dim currentId As String
    Dim requestURL As String
    Dim rawResponseText As String ' To store the full response string
    Dim extractedData As String   ' To store the formatted output for the Excel cell
    Dim xhr As Object             ' For MSXML2.XMLHTTP

    ' Variables for line parsing and searching
    Dim arrLines As Variant       ' Array to hold split lines
    Dim lineIndex As Long
    Dim foundOccurrences As String
    Dim startLine As Long
    Dim endLine As Long
    Dim j As Long

    ' Set the worksheet to the currently active sheet
    Set ws = ActiveSheet

    ' Optimize Excel performance during macro execution
    Application.ScreenUpdating = False
    Application.DisplayAlerts = False
    Application.EnableEvents = False

    ' Find the last row with data in Column A (ID column)
    lastRow = ws.Cells(ws.Rows.Count, "A").End(xlUp).Row

    ' Initialize MSXML2.XMLHTTP object
    Set xhr = CreateObject("MSXML2.XMLHTTP")

    ' Loop through IDs, starting from Row 2 (assuming Row 1 is header)
    For i = 2 To lastRow
        currentId = Trim(CStr(ws.Cells(i, "A").Value)) ' Read ID from Column A

        ' Only process if ID is not empty
        If currentId <> "" Then
            requestURL = Replace(BASE_URL, "{id}", currentId)
            extractedData = ""      ' Reset for each ID
            foundOccurrences = ""   ' Reset for each ID

            With xhr
                .Open "GET", requestURL, False ' False for synchronous request
                If AUTH_TOKEN <> "" Then
                    .setRequestHeader "Authorization", "Bearer " & AUTH_TOKEN
                End If
                .setRequestHeader "Content-Type", "application/json" ' For JSON APIs
                .send

                If .Status = 200 Then
                    rawResponseText = .responseText

                    ' --- Robust Line Splitting ---
                    ' This attempts to split the text into lines based on common line endings.
                    ' It tries to handle both Windows (CRLF) and Unix/Web (LF) line endings.
                    rawResponseText = Replace(rawResponseText, vbCrLf, vbLf) ' Normalize CRLF to LF first
                    arrLines = Split(rawResponseText, vbLf) ' Then split by LF
                    ' --- End Robust Line Splitting ---
                    
                    ' If after splitting, there's only one line, it means no line breaks were found.
                    ' In that case, the raw string is treated as the single "line".
                    If UBound(arrLines) = 0 Then
                         If Len(rawResponseText) > 0 Then
                             ReDim arrLines(0)
                             arrLines(0) = rawResponseText
                         Else
                             ' Empty response
                             ReDim arrLines(-1) ' Empty array
                         End If
                    End If


                    ' --- Search for SEARCH_TEXT in each identified "line" ---
                    If UBound(arrLines) >= 0 Then ' Check if there are any lines
                        For lineIndex = LBound(arrLines) To UBound(arrLines)
                            ' Use InStr for case-insensitive search (vbTextCompare)
                            If InStr(1, arrLines(lineIndex), SEARCH_TEXT, vbTextCompare) > 0 Then
                                ' Found the search text, now extract nearby "lines"
                                startLine = WorksheetFunction.Max(LBound(arrLines), lineIndex - LINES_BEFORE)
                                endLine = WorksheetFunction.Min(UBound(arrLines), lineIndex + LINES_AFTER)

                                foundOccurrences = vbCrLf
                                For j = startLine To endLine
                                    foundOccurrences = foundOccurrences & arrLines(j) & vbCrLf
                                Next j
                                foundOccurrences = foundOccurrences & vbCrLf ' Add an extra line break for separation between matches
                                ' If you only want the first occurrence per ID, uncomment next line:
                                ' Exit For
                            End If
                        Next lineIndex
                    End If

                    If foundOccurrences <> "" Then
                        extractedData = foundOccurrences
                    Else
                        extractedData = "No matching text found for ID: " & currentId
                    End If

                Else
                    extractedData = "HTTP Error (" & .Status & ") " & .StatusText & " for ID: " & currentId
                End If
            End With
        Else
            extractedData = "Empty ID in Column A (Row " & i & ")"
        End If

        ws.Cells(i, "B").Value = extractedData
        ws.Cells(i, "B").WrapText = True ' Ensure the cell wraps long text
        DoEvents ' Yield control to Excel, useful for long loops
    Next i

    ' Restore Excel performance settings
    Application.ScreenUpdating = True
    Application.DisplayAlerts = True
    Application.EnableEvents = True

    ' Clean up objects
    Set xhr = Nothing
    Set ws = Nothing

    MsgBox "Automation complete.", vbInformation
End Sub
